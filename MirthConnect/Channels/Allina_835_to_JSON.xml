<channel version="3.4.2">
  <id>015d3c39-a4dc-486e-a4c5-97120a3fdcb8</id>
  <nextMetaDataId>4</nextMetaDataId>
  <name>X12_835_JSON</name>
  <description></description>
  <enabled>true</enabled>
  <lastModified>
    <time>1490386684114</time>
    <timezone>America/Denver</timezone>
  </lastModified>
  <revision>124</revision>
  <sourceConnector version="3.4.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="3.4.2">
      <pluginProperties/>
      <pollConnectorProperties version="3.4.2">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>false</pollOnStart>
        <pollingFrequency>5000</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="3.4.2">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <scheme>SFTP</scheme>
      <schemeProperties class="com.mirth.connect.connectors.file.SftpSchemeProperties">
        <passwordAuth>true</passwordAuth>
        <keyAuth>false</keyAuth>
        <keyFile></keyFile>
        <passPhrase></passPhrase>
        <hostKeyChecking>ask</hostKeyChecking>
        <knownHostsFile></knownHostsFile>
        <configurationSettings class="linked-hash-map"/>
      </schemeProperties>
      <host>192.168.137.10/srv/data</host>
      <fileFilter>835_*</fileFilter>
      <regex>false</regex>
      <directoryRecursion>false</directoryRecursion>
      <ignoreDot>true</ignoreDot>
      <anonymous>false</anonymous>
      <username>mirth_sftpuser</username>
      <password>mirth_password</password>
      <timeout>20000</timeout>
      <secure>true</secure>
      <passive>true</passive>
      <validateConnection>true</validateConnection>
      <afterProcessingAction>MOVE</afterProcessingAction>
      <moveToDirectory>archive</moveToDirectory>
      <moveToFileName></moveToFileName>
      <errorReadingAction>NONE</errorReadingAction>
      <errorResponseAction>MOVE</errorResponseAction>
      <errorMoveToDirectory>error</errorMoveToDirectory>
      <errorMoveToFileName></errorMoveToFileName>
      <checkFileAge>true</checkFileAge>
      <fileAge>1000</fileAge>
      <fileSizeMinimum>0</fileSizeMinimum>
      <fileSizeMaximum></fileSizeMaximum>
      <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
      <sortBy>date</sortBy>
      <binary>false</binary>
      <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
    </properties>
    <transformer version="3.4.2">
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>JsonTransformer</name>
          <script>var x12Interchange = {};
x12Interchange.ISA01 = msg[&apos;ISA&apos;][&apos;ISA.01&apos;][&apos;ISA.01.1&apos;].toString().trim();
x12Interchange.ISA02 = msg[&apos;ISA&apos;][&apos;ISA.02&apos;][&apos;ISA.02.1&apos;].toString().trim();
x12Interchange.ISA03 = msg[&apos;ISA&apos;][&apos;ISA.03&apos;][&apos;ISA.03.1&apos;].toString().trim();
x12Interchange.ISA04 = msg[&apos;ISA&apos;][&apos;ISA.04&apos;][&apos;ISA.04.1&apos;].toString().trim();
x12Interchange.ISA05 = msg[&apos;ISA&apos;][&apos;ISA.05&apos;][&apos;ISA.05.1&apos;].toString().trim();
x12Interchange.ISA06 = msg[&apos;ISA&apos;][&apos;ISA.06&apos;][&apos;ISA.06.1&apos;].toString().trim();
x12Interchange.ISA07 = msg[&apos;ISA&apos;][&apos;ISA.07&apos;][&apos;ISA.07.1&apos;].toString().trim();
x12Interchange.ISA08 = msg[&apos;ISA&apos;][&apos;ISA.08&apos;][&apos;ISA.08.1&apos;].toString().trim();
x12Interchange.ISA09 = msg[&apos;ISA&apos;][&apos;ISA.09&apos;][&apos;ISA.09.1&apos;].toString().trim();
x12Interchange.ISA10 = msg[&apos;ISA&apos;][&apos;ISA.10&apos;][&apos;ISA.10.1&apos;].toString().trim();
x12Interchange.ISA11 = msg[&apos;ISA&apos;][&apos;ISA.11&apos;][&apos;ISA.11.1&apos;].toString().trim();
x12Interchange.ISA12 = msg[&apos;ISA&apos;][&apos;ISA.12&apos;][&apos;ISA.12.1&apos;].toString().trim();
x12Interchange.ISA13 = msg[&apos;ISA&apos;][&apos;ISA.13&apos;][&apos;ISA.13.1&apos;].toString().trim();
x12Interchange.ISA14 = msg[&apos;ISA&apos;][&apos;ISA.14&apos;][&apos;ISA.14.1&apos;].toString().trim();
x12Interchange.ISA15 = msg[&apos;ISA&apos;][&apos;ISA.15&apos;][&apos;ISA.15.1&apos;].toString().trim();
x12Interchange.ISA16 = msg[&apos;ISA&apos;][&apos;ISA.16&apos;][&apos;ISA.16.1&apos;].toString().trim();

var functionalGroups = new java.util.ArrayList();
var functionalGroup = {};

var transactions = new java.util.LinkedList();
var transaction = null;

var transactionPersons = new java.util.LinkedList();
var transactionPerson = null;

var transactionHeaders = new java.util.LinkedList();
var transactionHeader = null;

// Claims are only children of transaction headers
var parentOfClaim = null;
var claims = new java.util.LinkedList();

// Services are children of claims
var parentOfService = null;
var services = new java.util.LinkedList();

// Contacts can be children of different objects
var parentOfContact = null;
var contacts = new java.util.LinkedList();

// References can be children of different objects
var parentOfReference = null;
var references = new java.util.LinkedList();

// Dates can be children of different objects
var parentOfDate = null;
var dates = new java.util.LinkedList();

// Patients can be children of different objects
var parentOfPatient = null;
var patients = new java.util.LinkedList();

// Adjustments can be children of different objects
var parentOfAdjustment = null;
var adjustments = new java.util.LinkedList();

// Amounts can be children of different objects
var parentOfAmount = null;
var amount =  null;

// Outpatient adjudication
var parentOfOutpatientAdjudication = null;
var outpatientAdjudication = null;

// Inpatient adjudication
var parentOfInpatientAdjudication = null;
var inpatientAdjudication = null;

// Remark codes 
var parentOfRemarkCodes = null;
var remarkCodes = new java.util.LinkedList();

// Provider adjustment belongs to the transaction
var parentOfProviderAdjustment = null;
var providerAdjustment = null;

for each (seg in msg.children()) {
	if (seg.name().toString() == &quot;GS&quot;) {
		functionalGroup = {};
		functionalGroup.GS01 = seg[&apos;GS.01&apos;][&apos;GS.01.1&apos;].toString();
		functionalGroup.GS02 = seg[&apos;GS.02&apos;][&apos;GS.02.1&apos;].toString();
		functionalGroup.GS03 = seg[&apos;GS.03&apos;][&apos;GS.03.1&apos;].toString();
		functionalGroup.GS04 = seg[&apos;GS.04&apos;][&apos;GS.04.1&apos;].toString();
		functionalGroup.GS05 = seg[&apos;GS.05&apos;][&apos;GS.05.1&apos;].toString();
		functionalGroup.GS06 = seg[&apos;GS.06&apos;][&apos;GS.06.1&apos;].toString();
		functionalGroup.GS07 = seg[&apos;GS.07&apos;][&apos;GS.07.1&apos;].toString();
		functionalGroup.GS08 = seg[&apos;GS.08&apos;][&apos;GS.08.1&apos;].toString();
		functionalGroups.add(functionalGroup);
	}
	else if (seg.name().toString() == &quot;ST&quot;) {
		transaction = {};
		transaction.ST01 = seg[&apos;ST.01&apos;][&apos;ST.01.1&apos;].toString();
		transaction.ST02 = seg[&apos;ST.02&apos;][&apos;ST.02.1&apos;].toString();
		newReferenceParent(transaction);
		newDateParent(transaction);
		newProviderAdjustmentParent(transaction);
		transactions.add(transaction);
	}
	else if (seg.name().toString() == &quot;SE&quot;) {
		transaction.persons = transactionPersons.toArray();
		transactionPersons.clear();
		transaction.headers = transactionHeaders.toArray();
		transactionHeaders.clear();
		transaction = null;
		newReferenceParent(null);
	}
	else if (seg.name().toString() == &quot;GE&quot;) {
		functionalGroup.transactions = transactions.toArray();
		functionalGroup = null;
		transactions.clear();
		newReferenceParent(null);
	}
	else if (seg.name().toString() == &quot;BPR&quot;) {
		var financial = {};
		financial.BPR01 = seg[&apos;BPR.01&apos;][&apos;BPR.01.1&apos;].toString();
		financial.BPR02 = seg[&apos;BPR.02&apos;][&apos;BPR.02.1&apos;].toString();
		financial.BPR03 = seg[&apos;BPR.03&apos;][&apos;BPR.03.1&apos;].toString();
		financial.BPR04 = seg[&apos;BPR.04&apos;][&apos;BPR.04.1&apos;].toString();
		financial.BPR05 = seg[&apos;BPR.05&apos;][&apos;BPR.05.1&apos;].toString();
		financial.BPR06 = seg[&apos;BPR.06&apos;][&apos;BPR.06.1&apos;].toString();
		financial.BPR07 = seg[&apos;BPR.07&apos;][&apos;BPR.07.1&apos;].toString();
		financial.BPR08 = seg[&apos;BPR.08&apos;][&apos;BPR.08.1&apos;].toString();
		financial.BPR09 = seg[&apos;BPR.09&apos;][&apos;BPR.09.1&apos;].toString();
		financial.BPR10 = seg[&apos;BPR.10&apos;][&apos;BPR.10.1&apos;].toString();
		financial.BPR11 = seg[&apos;BPR.11&apos;][&apos;BPR.11.1&apos;].toString();
		financial.BPR12 = seg[&apos;BPR.12&apos;][&apos;BPR.12.1&apos;].toString();
		financial.BPR13 = seg[&apos;BPR.13&apos;][&apos;BPR.13.1&apos;].toString();
		financial.BPR14 = seg[&apos;BPR.14&apos;][&apos;BPR.14.1&apos;].toString();
		financial.BPR15 = seg[&apos;BPR.15&apos;][&apos;BPR.15.1&apos;].toString();
		financial.BPR16 = seg[&apos;BPR.16&apos;][&apos;BPR.16.1&apos;].toString();
		transaction.financial = financial;
		newReferenceParent(financial);
	}
	else if (seg.name().toString() == &quot;TRN&quot;) {
		var traceNumber = {};
		traceNumber.TRN01 = seg[&apos;TRN.01&apos;][&apos;TRN.01.1&apos;].toString();
		traceNumber.TRN02 = seg[&apos;TRN.02&apos;][&apos;TRN.02.1&apos;].toString();
		traceNumber.TRN03 = seg[&apos;TRN.03&apos;][&apos;TRN.03.1&apos;].toString();
		traceNumber.TRN04 = seg[&apos;TRN.04&apos;][&apos;TRN.04.1&apos;].toString();
		transaction.traceNumber = traceNumber;
		newReferenceParent(traceNumber);
	}
	else if (seg.name().toString() == &quot;REF&quot;) {
		var reference = {};
		reference.REF01 = seg[&apos;REF.01&apos;][&apos;REF.01.1&apos;].toString();
		reference.REF02 = seg[&apos;REF.02&apos;][&apos;REF.02.1&apos;].toString();
		references.add(reference);
	}
	else if (seg.name().toString() == &quot;DTM&quot;) {
		var date = {};
		date.DTM01 = seg[&apos;DTM.01&apos;][&apos;DTM.01.1&apos;].toString();
		date.DTM02 = seg[&apos;DTM.02&apos;][&apos;DTM.02.1&apos;].toString();
		dates.add(date);
	}
	else if (seg.name().toString() == &quot;N1&quot;) {
		transactionPerson = {};
		transactionPerson.N101 = seg[&apos;N1.01&apos;][&apos;N1.01.1&apos;].toString();
		transactionPerson.N102 = seg[&apos;N1.02&apos;][&apos;N1.02.1&apos;].toString();
		transactionPerson.N103 = seg[&apos;N1.03&apos;][&apos;N1.03.1&apos;].toString();
		transactionPerson.N104 = seg[&apos;N1.04&apos;][&apos;N1.04.1&apos;].toString();
		newReferenceParent(transactionPerson);
		newContactParent(transactionPerson);
		transactionPersons.add(transactionPerson);
	}
	else if (seg.name().toString() == &quot;N3&quot;) {
		transactionPerson.N301 = seg[&apos;N3.01&apos;][&apos;N3.01.1&apos;].toString();
		transactionPerson.N302 = seg[&apos;N3.02&apos;][&apos;N3.02.1&apos;].toString();
	}
	else if (seg.name().toString() == &quot;N4&quot;) {
		transactionPerson.N401 = seg[&apos;N4.01&apos;][&apos;N4.01.1&apos;].toString();
		transactionPerson.N402 = seg[&apos;N4.02&apos;][&apos;N4.02.1&apos;].toString();
		transactionPerson.N403 = seg[&apos;N4.03&apos;][&apos;N4.03.1&apos;].toString();
	}
	else if (seg.name().toString() == &quot;PER&quot;) {
		var contact = {};
		contact.PER01 = seg[&apos;PER.01&apos;][&apos;PER.01.1&apos;].toString();
		contact.PER02 = seg[&apos;PER.02&apos;][&apos;PER.02.1&apos;].toString();
		contact.PER03 = seg[&apos;PER.03&apos;][&apos;PER.03.1&apos;].toString();
		contact.PER04 = seg[&apos;PER.04&apos;][&apos;PER.04.1&apos;].toString();
		contact.PER05 = seg[&apos;PER.05&apos;][&apos;PER.05.1&apos;].toString();
		contact.PER06 = seg[&apos;PER.06&apos;][&apos;PER.06.1&apos;].toString();
		contacts.add(contact);
	}
	else if (seg.name().toString() == &quot;LX&quot;) {
		transactionHeader = {};
		transactionHeader.LX01 = seg[&apos;LX.01&apos;][&apos;LX.01.1&apos;].toString();
		newClaimParent(transactionHeader);
		transactionHeaders.add(transactionHeader);
	}
	else if (seg.name().toString() == &quot;CLP&quot;) {
		var claim = {};
		claim.CLP01 = seg[&apos;CLP.01&apos;][&apos;CLP.01.1&apos;].toString();
		claim.CLP02 = seg[&apos;CLP.02&apos;][&apos;CLP.02.1&apos;].toString();
		claim.CLP03 = seg[&apos;CLP.03&apos;][&apos;CLP.03.1&apos;].toString();
		claim.CLP04 = seg[&apos;CLP.04&apos;][&apos;CLP.04.1&apos;].toString();
		claim.CLP05 = seg[&apos;CLP.05&apos;][&apos;CLP.05.1&apos;].toString();
		claim.CLP06 = seg[&apos;CLP.06&apos;][&apos;CLP.06.1&apos;].toString();
		claim.CLP07 = seg[&apos;CLP.07&apos;][&apos;CLP.07.1&apos;].toString();
		claim.CLP08 = seg[&apos;CLP.08&apos;][&apos;CLP.08.1&apos;].toString();
		claim.CLP09 = seg[&apos;CLP.09&apos;][&apos;CLP.09.1&apos;].toString();
		newServiceParent(claim);
		newReferenceParent(claim);
		newDateParent(claim);
		newPatientParent(claim);
		newAdjustmentParent(claim);
		newAmountParent(claim);
		newInpatientAdjudicationParent(claim);
		newOutpatientAdjudicationParent(claim);
		newRemarkCodesParent(claim);
		claims.add(claim);
	}
	else if (seg.name().toString() == &quot;SVC&quot;) {
		var service = {};
		service.SVC0101 = seg[&apos;SVC.01&apos;][&apos;SVC.01.1&apos;].toString();
		service.SVC0102 = seg[&apos;SVC.01&apos;][&apos;SVC.01.2&apos;].toString();
		service.SVC0103 = seg[&apos;SVC.01&apos;][&apos;SVC.01.3&apos;].toString();
		service.SVC02 = seg[&apos;SVC.02&apos;][&apos;SVC.02.1&apos;].toString();
		service.SVC03 = seg[&apos;SVC.03&apos;][&apos;SVC.03.1&apos;].toString();
		service.SVC04 = seg[&apos;SVC.04&apos;][&apos;SVC.04.1&apos;].toString();
		service.SVC05 = seg[&apos;SVC.05&apos;][&apos;SVC.05.1&apos;].toString();
		service.SVC06 = seg[&apos;SVC.06&apos;][&apos;SVC.06.1&apos;].toString();
		service.SVC07 = seg[&apos;SVC.07&apos;][&apos;SVC.07.1&apos;].toString();
		newReferenceParent(service);
		newDateParent(service);
		newPatientParent(service);
		newAdjustmentParent(service);
		newAmountParent(service);
		newInpatientAdjudicationParent(service);
		newOutpatientAdjudicationParent(service);
		newRemarkCodesParent(service);
		services.add(service);
	}
	else if (seg.name().toString() == &quot;CAS&quot;) {
		var adjustment = {};
		adjustment.CAS01 = seg[&apos;CAS.01&apos;][&apos;CAS.01.1&apos;].toString();
		adjustment.CAS02 = seg[&apos;CAS.02&apos;][&apos;CAS.02.1&apos;].toString();
		adjustment.CAS03 = seg[&apos;CAS.03&apos;][&apos;CAS.03.1&apos;].toString();
		adjustments.add(adjustment);
	}
	else if (seg.name().toString() == &quot;AMT&quot;) {
		amount = {};
		amount.AMT01 = seg[&apos;AMT.01&apos;][&apos;AMT.01.1&apos;].toString();
		amount.AMT02 = seg[&apos;AMT.02&apos;][&apos;AMT.02.1&apos;].toString();
	}
	else if (seg.name().toString() == &quot;NM1&quot;) {
		var patient = {};
		patient.NM101 = seg[&apos;NM1.01&apos;][&apos;NM1.01.1&apos;].toString();
		patient.NM102 = seg[&apos;NM1.02&apos;][&apos;NM1.02.1&apos;].toString();
		patient.NM103 = seg[&apos;NM1.03&apos;][&apos;NM1.03.1&apos;].toString();
		patient.NM104 = seg[&apos;NM1.04&apos;][&apos;NM1.04.1&apos;].toString();
		patient.NM105 = seg[&apos;NM1.05&apos;][&apos;NM1.05.1&apos;].toString();
		patient.NM106 = seg[&apos;NM1.06&apos;][&apos;NM1.06.1&apos;].toString();
		patient.NM107 = seg[&apos;NM1.07&apos;][&apos;NM1.07.1&apos;].toString();
		patient.NM108 = seg[&apos;NM1.08&apos;][&apos;NM1.08.1&apos;].toString();
		patient.NM109 = seg[&apos;NM1.09&apos;][&apos;NM1.09.1&apos;].toString();
		newContactParent(transactionPerson);
		patients.add(patient);
	}
	else if (seg.name().toString() == &quot;MOA&quot;) {
		outpatientAdjudication = {};
		outpatientAdjudication.MOA01 = seg[&apos;MOA.01&apos;][&apos;MOA.01.1&apos;].toString();
		outpatientAdjudication.MOA02 = seg[&apos;MOA.02&apos;][&apos;MOA.02.1&apos;].toString();
		outpatientAdjudication.MOA03 = seg[&apos;MOA.03&apos;][&apos;MOA.03.1&apos;].toString();
		outpatientAdjudication.MOA04 = seg[&apos;MOA.04&apos;][&apos;MOA.04.1&apos;].toString();
		outpatientAdjudication.MOA05 = seg[&apos;MOA.05&apos;][&apos;MOA.05.1&apos;].toString();
	}
	else if (seg.name().toString() == &quot;MIA&quot;) {
		inpatientAdjudication = {};
		inpatientAdjudication.MIA01 = seg[&apos;MIA.01&apos;][&apos;MIA.01.1&apos;].toString();
		inpatientAdjudication.MIA02 = seg[&apos;MIA.02&apos;][&apos;MIA.02.1&apos;].toString();
		inpatientAdjudication.MIA03 = seg[&apos;MIA.03&apos;][&apos;MIA.03.1&apos;].toString();
		inpatientAdjudication.MIA04 = seg[&apos;MIA.04&apos;][&apos;MIA.04.1&apos;].toString();
		inpatientAdjudication.MIA05 = seg[&apos;MIA.05&apos;][&apos;MIA.05.1&apos;].toString();
	}
	else if (seg.name().toString() == &quot;LQ&quot;) {
		var remarkCode = {};
		remarkCode.LQ01 = seg[&apos;LQ.01&apos;][&apos;LQ.01.1&apos;].toString();
		remarkCode.LQ02 = seg[&apos;LQ.02&apos;][&apos;LQ.02.1&apos;].toString();
		remarkCodes.add(remarkCode);
	}
	else if (seg.name().toString() == &quot;PLB&quot;) {
		providerAdjustment = {};
		providerAdjustment.PLB01 = seg[&apos;PLB.01&apos;][&apos;PLB.01.1&apos;].toString();
		providerAdjustment.PLB02 = seg[&apos;PLB.02&apos;][&apos;PLB.02.1&apos;].toString();
		providerAdjustment.PLB0301 = seg[&apos;PLB.03&apos;][&apos;PLB.03.1&apos;].toString();
		providerAdjustment.PLB0302 = seg[&apos;PLB.03&apos;][&apos;PLB.03.2&apos;].toString();
		providerAdjustment.PLB04 = seg[&apos;PLB.04&apos;][&apos;PLB.04.1&apos;].toString();
		providerAdjustment.PLB05 = seg[&apos;PLB.05&apos;][&apos;PLB.05.1&apos;].toString();
		providerAdjustment.PLB06 = seg[&apos;PLB.06&apos;][&apos;PLB.06.1&apos;].toString();
		providerAdjustment.PLB07 = seg[&apos;PLB.07&apos;][&apos;PLB.07.1&apos;].toString();
		providerAdjustment.PLB08 = seg[&apos;PLB.08&apos;][&apos;PLB.08.1&apos;].toString();
		providerAdjustment.PLB09 = seg[&apos;PLB.09&apos;][&apos;PLB.09.1&apos;].toString();
		providerAdjustment.PLB10 = seg[&apos;PLB.10&apos;][&apos;PLB.10.1&apos;].toString();
		providerAdjustment.PLB11 = seg[&apos;PLB.11&apos;][&apos;PLB.11.1&apos;].toString();
		providerAdjustment.PLB12 = seg[&apos;PLB.12&apos;][&apos;PLB.12.1&apos;].toString();
		providerAdjustment.PLB13 = seg[&apos;PLB.13&apos;][&apos;PLB.13.1&apos;].toString();
		providerAdjustment.PLB14 =  seg[&apos;PLB.14&apos;][&apos;PLB.14.1&apos;].toString();
	}
}

newClaimParent(null);
newServiceParent(null);
newContactParent(null);
newReferenceParent(null);
newDateParent(null);
newPatientParent(null);
newAdjustmentParent(null);
newAmountParent(null);
newOutpatientAdjudicationParent(null);
newInpatientAdjudicationParent(null);
newRemarkCodesParent(null);
newProviderAdjustmentParent(null);

x12Interchange.functionalGroups = functionalGroups.toArray();

channelMap.put(&apos;x12Interchange&apos;, JSON.stringify(x12Interchange));

function newReferenceParent(newParent) {
	if (parentOfReference != null &amp;&amp; !references.isEmpty()) {
		parentOfReference.references = references.toArray();
	}
	references.clear();
	parentOfReference = newParent;
}

function newDateParent(newParent) {
	if (parentOfDate != null &amp;&amp; !dates.isEmpty()) {
		parentOfDate.dates = dates.toArray();
	}
	dates.clear();
	parentOfDate = newParent;
}

function newPatientParent(newParent) {
	if (parentOfPatient != null &amp;&amp; !patients.isEmpty()) {
		parentOfPatient.patients = patients.toArray();
	}
	patients.clear();
	parentOfPatient = newParent;
}

function newAdjustmentParent(newParent) {
	if (parentOfAdjustment != null &amp;&amp; !adjustments.isEmpty()) {
		parentOfAdjustment.adjustments = adjustments.toArray();
	}
	adjustments.clear();
	parentOfAdjustment = newParent;
}

function newContactParent(newParent) {
	if (parentOfContact != null &amp;&amp; !contacts.isEmpty()) {
		parentOfContact.contacts = contacts.toArray();
	}
	contacts.clear();
	parentOfContact = newParent;
}

function newAmountParent(newParent) {
	if (parentOfAmount != null &amp;&amp; amount != null) {
		parentOfAmount.amount = amount;
	}
	amount = null;
	parentOfAmount = newParent;
}

function newOutpatientAdjudicationParent(newParent) {
	if (parentOfOutpatientAdjudication != null &amp;&amp; outpatientAdjudication != null) {
		parentOfOutpatientAdjudication.outpatientAdjudication = outpatientAdjudication;
	}
	outpatientAdjudication = null;
	parentOfOutpatientAdjudication = newParent;
}

function newInpatientAdjudicationParent(newParent) {
	if (parentOfInpatientAdjudication != null &amp;&amp; inpatientAdjudication != null) {
		parentOfInpatientAdjudication.inpatientAdjudication = inpatientAdjudication;
	}
	inpatientAdjudication = null;
	parentOfInpatientAdjudication = newParent;
}

function newRemarkCodesParent(newParent) {
	if (parentOfRemarkCodes != null &amp;&amp; !remarkCodes.isEmpty()) {
		parentOfRemarkCodes.remarkCodes = remarkCodes.toArray();
	}
	remarkCodes.clear();
	parentOfRemarkCodes = newParent;
}

function newClaimParent(newParent) {
	if (parentOfClaim != null &amp;&amp; !claims.isEmpty()) {
		parentOfClaim.claims = claims.toArray();
	}
	claims.clear();
	parentOfClaim = newParent;
}

function newServiceParent(newParent) {
	if (parentOfService != null &amp;&amp; !services.isEmpty()) {
		parentOfService.services = services.toArray();
	}
	services.clear();
	parentOfService = newParent;
}

function newProviderAdjustmentParent(newParent) {
	if (parentOfProviderAdjustment != null &amp;&amp; providerAdjustment != null) {
		parentOfProviderAdjustment.providerAdjustment = providerAdjustment;
	}
	providerAdjustment = null;
	parentOfProviderAdjustment = newParent;
}</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var x12Interchange = {};
x12Interchange.ISA01 = msg[&apos;ISA&apos;][&apos;ISA.01&apos;][&apos;ISA.01.1&apos;].toString().trim();
x12Interchange.ISA02 = msg[&apos;ISA&apos;][&apos;ISA.02&apos;][&apos;ISA.02.1&apos;].toString().trim();
x12Interchange.ISA03 = msg[&apos;ISA&apos;][&apos;ISA.03&apos;][&apos;ISA.03.1&apos;].toString().trim();
x12Interchange.ISA04 = msg[&apos;ISA&apos;][&apos;ISA.04&apos;][&apos;ISA.04.1&apos;].toString().trim();
x12Interchange.ISA05 = msg[&apos;ISA&apos;][&apos;ISA.05&apos;][&apos;ISA.05.1&apos;].toString().trim();
x12Interchange.ISA06 = msg[&apos;ISA&apos;][&apos;ISA.06&apos;][&apos;ISA.06.1&apos;].toString().trim();
x12Interchange.ISA07 = msg[&apos;ISA&apos;][&apos;ISA.07&apos;][&apos;ISA.07.1&apos;].toString().trim();
x12Interchange.ISA08 = msg[&apos;ISA&apos;][&apos;ISA.08&apos;][&apos;ISA.08.1&apos;].toString().trim();
x12Interchange.ISA09 = msg[&apos;ISA&apos;][&apos;ISA.09&apos;][&apos;ISA.09.1&apos;].toString().trim();
x12Interchange.ISA10 = msg[&apos;ISA&apos;][&apos;ISA.10&apos;][&apos;ISA.10.1&apos;].toString().trim();
x12Interchange.ISA11 = msg[&apos;ISA&apos;][&apos;ISA.11&apos;][&apos;ISA.11.1&apos;].toString().trim();
x12Interchange.ISA12 = msg[&apos;ISA&apos;][&apos;ISA.12&apos;][&apos;ISA.12.1&apos;].toString().trim();
x12Interchange.ISA13 = msg[&apos;ISA&apos;][&apos;ISA.13&apos;][&apos;ISA.13.1&apos;].toString().trim();
x12Interchange.ISA14 = msg[&apos;ISA&apos;][&apos;ISA.14&apos;][&apos;ISA.14.1&apos;].toString().trim();
x12Interchange.ISA15 = msg[&apos;ISA&apos;][&apos;ISA.15&apos;][&apos;ISA.15.1&apos;].toString().trim();
x12Interchange.ISA16 = msg[&apos;ISA&apos;][&apos;ISA.16&apos;][&apos;ISA.16.1&apos;].toString().trim();

var functionalGroups = new java.util.ArrayList();
var functionalGroup = {};

var transactions = new java.util.LinkedList();
var transaction = null;

var transactionPersons = new java.util.LinkedList();
var transactionPerson = null;

var transactionHeaders = new java.util.LinkedList();
var transactionHeader = null;

// Claims are only children of transaction headers
var parentOfClaim = null;
var claims = new java.util.LinkedList();

// Services are children of claims
var parentOfService = null;
var services = new java.util.LinkedList();

// Contacts can be children of different objects
var parentOfContact = null;
var contacts = new java.util.LinkedList();

// References can be children of different objects
var parentOfReference = null;
var references = new java.util.LinkedList();

// Dates can be children of different objects
var parentOfDate = null;
var dates = new java.util.LinkedList();

// Patients can be children of different objects
var parentOfPatient = null;
var patients = new java.util.LinkedList();

// Adjustments can be children of different objects
var parentOfAdjustment = null;
var adjustments = new java.util.LinkedList();

// Amounts can be children of different objects
var parentOfAmount = null;
var amount =  null;

// Outpatient adjudication
var parentOfOutpatientAdjudication = null;
var outpatientAdjudication = null;

// Inpatient adjudication
var parentOfInpatientAdjudication = null;
var inpatientAdjudication = null;

// Remark codes 
var parentOfRemarkCodes = null;
var remarkCodes = new java.util.LinkedList();

// Provider adjustment belongs to the transaction
var parentOfProviderAdjustment = null;
var providerAdjustment = null;

for each (seg in msg.children()) {
	if (seg.name().toString() == &quot;GS&quot;) {
		functionalGroup = {};
		functionalGroup.GS01 = seg[&apos;GS.01&apos;][&apos;GS.01.1&apos;].toString();
		functionalGroup.GS02 = seg[&apos;GS.02&apos;][&apos;GS.02.1&apos;].toString();
		functionalGroup.GS03 = seg[&apos;GS.03&apos;][&apos;GS.03.1&apos;].toString();
		functionalGroup.GS04 = seg[&apos;GS.04&apos;][&apos;GS.04.1&apos;].toString();
		functionalGroup.GS05 = seg[&apos;GS.05&apos;][&apos;GS.05.1&apos;].toString();
		functionalGroup.GS06 = seg[&apos;GS.06&apos;][&apos;GS.06.1&apos;].toString();
		functionalGroup.GS07 = seg[&apos;GS.07&apos;][&apos;GS.07.1&apos;].toString();
		functionalGroup.GS08 = seg[&apos;GS.08&apos;][&apos;GS.08.1&apos;].toString();
		functionalGroups.add(functionalGroup);
	}
	else if (seg.name().toString() == &quot;ST&quot;) {
		transaction = {};
		transaction.ST01 = seg[&apos;ST.01&apos;][&apos;ST.01.1&apos;].toString();
		transaction.ST02 = seg[&apos;ST.02&apos;][&apos;ST.02.1&apos;].toString();
		newReferenceParent(transaction);
		newDateParent(transaction);
		newProviderAdjustmentParent(transaction);
		transactions.add(transaction);
	}
	else if (seg.name().toString() == &quot;SE&quot;) {
		transaction.persons = transactionPersons.toArray();
		transactionPersons.clear();
		transaction.headers = transactionHeaders.toArray();
		transactionHeaders.clear();
		transaction = null;
		newReferenceParent(null);
	}
	else if (seg.name().toString() == &quot;GE&quot;) {
		functionalGroup.transactions = transactions.toArray();
		functionalGroup = null;
		transactions.clear();
		newReferenceParent(null);
	}
	else if (seg.name().toString() == &quot;BPR&quot;) {
		var financial = {};
		financial.BPR01 = seg[&apos;BPR.01&apos;][&apos;BPR.01.1&apos;].toString();
		financial.BPR02 = seg[&apos;BPR.02&apos;][&apos;BPR.02.1&apos;].toString();
		financial.BPR03 = seg[&apos;BPR.03&apos;][&apos;BPR.03.1&apos;].toString();
		financial.BPR04 = seg[&apos;BPR.04&apos;][&apos;BPR.04.1&apos;].toString();
		financial.BPR05 = seg[&apos;BPR.05&apos;][&apos;BPR.05.1&apos;].toString();
		financial.BPR06 = seg[&apos;BPR.06&apos;][&apos;BPR.06.1&apos;].toString();
		financial.BPR07 = seg[&apos;BPR.07&apos;][&apos;BPR.07.1&apos;].toString();
		financial.BPR08 = seg[&apos;BPR.08&apos;][&apos;BPR.08.1&apos;].toString();
		financial.BPR09 = seg[&apos;BPR.09&apos;][&apos;BPR.09.1&apos;].toString();
		financial.BPR10 = seg[&apos;BPR.10&apos;][&apos;BPR.10.1&apos;].toString();
		financial.BPR11 = seg[&apos;BPR.11&apos;][&apos;BPR.11.1&apos;].toString();
		financial.BPR12 = seg[&apos;BPR.12&apos;][&apos;BPR.12.1&apos;].toString();
		financial.BPR13 = seg[&apos;BPR.13&apos;][&apos;BPR.13.1&apos;].toString();
		financial.BPR14 = seg[&apos;BPR.14&apos;][&apos;BPR.14.1&apos;].toString();
		financial.BPR15 = seg[&apos;BPR.15&apos;][&apos;BPR.15.1&apos;].toString();
		financial.BPR16 = seg[&apos;BPR.16&apos;][&apos;BPR.16.1&apos;].toString();
		transaction.financial = financial;
		newReferenceParent(financial);
	}
	else if (seg.name().toString() == &quot;TRN&quot;) {
		var traceNumber = {};
		traceNumber.TRN01 = seg[&apos;TRN.01&apos;][&apos;TRN.01.1&apos;].toString();
		traceNumber.TRN02 = seg[&apos;TRN.02&apos;][&apos;TRN.02.1&apos;].toString();
		traceNumber.TRN03 = seg[&apos;TRN.03&apos;][&apos;TRN.03.1&apos;].toString();
		traceNumber.TRN04 = seg[&apos;TRN.04&apos;][&apos;TRN.04.1&apos;].toString();
		transaction.traceNumber = traceNumber;
		newReferenceParent(traceNumber);
	}
	else if (seg.name().toString() == &quot;REF&quot;) {
		var reference = {};
		reference.REF01 = seg[&apos;REF.01&apos;][&apos;REF.01.1&apos;].toString();
		reference.REF02 = seg[&apos;REF.02&apos;][&apos;REF.02.1&apos;].toString();
		references.add(reference);
	}
	else if (seg.name().toString() == &quot;DTM&quot;) {
		var date = {};
		date.DTM01 = seg[&apos;DTM.01&apos;][&apos;DTM.01.1&apos;].toString();
		date.DTM02 = seg[&apos;DTM.02&apos;][&apos;DTM.02.1&apos;].toString();
		dates.add(date);
	}
	else if (seg.name().toString() == &quot;N1&quot;) {
		transactionPerson = {};
		transactionPerson.N101 = seg[&apos;N1.01&apos;][&apos;N1.01.1&apos;].toString();
		transactionPerson.N102 = seg[&apos;N1.02&apos;][&apos;N1.02.1&apos;].toString();
		transactionPerson.N103 = seg[&apos;N1.03&apos;][&apos;N1.03.1&apos;].toString();
		transactionPerson.N104 = seg[&apos;N1.04&apos;][&apos;N1.04.1&apos;].toString();
		newReferenceParent(transactionPerson);
		newContactParent(transactionPerson);
		transactionPersons.add(transactionPerson);
	}
	else if (seg.name().toString() == &quot;N3&quot;) {
		transactionPerson.N301 = seg[&apos;N3.01&apos;][&apos;N3.01.1&apos;].toString();
		transactionPerson.N302 = seg[&apos;N3.02&apos;][&apos;N3.02.1&apos;].toString();
	}
	else if (seg.name().toString() == &quot;N4&quot;) {
		transactionPerson.N401 = seg[&apos;N4.01&apos;][&apos;N4.01.1&apos;].toString();
		transactionPerson.N402 = seg[&apos;N4.02&apos;][&apos;N4.02.1&apos;].toString();
		transactionPerson.N403 = seg[&apos;N4.03&apos;][&apos;N4.03.1&apos;].toString();
	}
	else if (seg.name().toString() == &quot;PER&quot;) {
		var contact = {};
		contact.PER01 = seg[&apos;PER.01&apos;][&apos;PER.01.1&apos;].toString();
		contact.PER02 = seg[&apos;PER.02&apos;][&apos;PER.02.1&apos;].toString();
		contact.PER03 = seg[&apos;PER.03&apos;][&apos;PER.03.1&apos;].toString();
		contact.PER04 = seg[&apos;PER.04&apos;][&apos;PER.04.1&apos;].toString();
		contact.PER05 = seg[&apos;PER.05&apos;][&apos;PER.05.1&apos;].toString();
		contact.PER06 = seg[&apos;PER.06&apos;][&apos;PER.06.1&apos;].toString();
		contacts.add(contact);
	}
	else if (seg.name().toString() == &quot;LX&quot;) {
		transactionHeader = {};
		transactionHeader.LX01 = seg[&apos;LX.01&apos;][&apos;LX.01.1&apos;].toString();
		newClaimParent(transactionHeader);
		transactionHeaders.add(transactionHeader);
	}
	else if (seg.name().toString() == &quot;CLP&quot;) {
		var claim = {};
		claim.CLP01 = seg[&apos;CLP.01&apos;][&apos;CLP.01.1&apos;].toString();
		claim.CLP02 = seg[&apos;CLP.02&apos;][&apos;CLP.02.1&apos;].toString();
		claim.CLP03 = seg[&apos;CLP.03&apos;][&apos;CLP.03.1&apos;].toString();
		claim.CLP04 = seg[&apos;CLP.04&apos;][&apos;CLP.04.1&apos;].toString();
		claim.CLP05 = seg[&apos;CLP.05&apos;][&apos;CLP.05.1&apos;].toString();
		claim.CLP06 = seg[&apos;CLP.06&apos;][&apos;CLP.06.1&apos;].toString();
		claim.CLP07 = seg[&apos;CLP.07&apos;][&apos;CLP.07.1&apos;].toString();
		claim.CLP08 = seg[&apos;CLP.08&apos;][&apos;CLP.08.1&apos;].toString();
		claim.CLP09 = seg[&apos;CLP.09&apos;][&apos;CLP.09.1&apos;].toString();
		newServiceParent(claim);
		newReferenceParent(claim);
		newDateParent(claim);
		newPatientParent(claim);
		newAdjustmentParent(claim);
		newAmountParent(claim);
		newInpatientAdjudicationParent(claim);
		newOutpatientAdjudicationParent(claim);
		newRemarkCodesParent(claim);
		claims.add(claim);
	}
	else if (seg.name().toString() == &quot;SVC&quot;) {
		var service = {};
		service.SVC0101 = seg[&apos;SVC.01&apos;][&apos;SVC.01.1&apos;].toString();
		service.SVC0102 = seg[&apos;SVC.01&apos;][&apos;SVC.01.2&apos;].toString();
		service.SVC0103 = seg[&apos;SVC.01&apos;][&apos;SVC.01.3&apos;].toString();
		service.SVC02 = seg[&apos;SVC.02&apos;][&apos;SVC.02.1&apos;].toString();
		service.SVC03 = seg[&apos;SVC.03&apos;][&apos;SVC.03.1&apos;].toString();
		service.SVC04 = seg[&apos;SVC.04&apos;][&apos;SVC.04.1&apos;].toString();
		service.SVC05 = seg[&apos;SVC.05&apos;][&apos;SVC.05.1&apos;].toString();
		service.SVC06 = seg[&apos;SVC.06&apos;][&apos;SVC.06.1&apos;].toString();
		service.SVC07 = seg[&apos;SVC.07&apos;][&apos;SVC.07.1&apos;].toString();
		newReferenceParent(service);
		newDateParent(service);
		newPatientParent(service);
		newAdjustmentParent(service);
		newAmountParent(service);
		newInpatientAdjudicationParent(service);
		newOutpatientAdjudicationParent(service);
		newRemarkCodesParent(service);
		services.add(service);
	}
	else if (seg.name().toString() == &quot;CAS&quot;) {
		var adjustment = {};
		adjustment.CAS01 = seg[&apos;CAS.01&apos;][&apos;CAS.01.1&apos;].toString();
		adjustment.CAS02 = seg[&apos;CAS.02&apos;][&apos;CAS.02.1&apos;].toString();
		adjustment.CAS03 = seg[&apos;CAS.03&apos;][&apos;CAS.03.1&apos;].toString();
		adjustments.add(adjustment);
	}
	else if (seg.name().toString() == &quot;AMT&quot;) {
		amount = {};
		amount.AMT01 = seg[&apos;AMT.01&apos;][&apos;AMT.01.1&apos;].toString();
		amount.AMT02 = seg[&apos;AMT.02&apos;][&apos;AMT.02.1&apos;].toString();
	}
	else if (seg.name().toString() == &quot;NM1&quot;) {
		var patient = {};
		patient.NM101 = seg[&apos;NM1.01&apos;][&apos;NM1.01.1&apos;].toString();
		patient.NM102 = seg[&apos;NM1.02&apos;][&apos;NM1.02.1&apos;].toString();
		patient.NM103 = seg[&apos;NM1.03&apos;][&apos;NM1.03.1&apos;].toString();
		patient.NM104 = seg[&apos;NM1.04&apos;][&apos;NM1.04.1&apos;].toString();
		patient.NM105 = seg[&apos;NM1.05&apos;][&apos;NM1.05.1&apos;].toString();
		patient.NM106 = seg[&apos;NM1.06&apos;][&apos;NM1.06.1&apos;].toString();
		patient.NM107 = seg[&apos;NM1.07&apos;][&apos;NM1.07.1&apos;].toString();
		patient.NM108 = seg[&apos;NM1.08&apos;][&apos;NM1.08.1&apos;].toString();
		patient.NM109 = seg[&apos;NM1.09&apos;][&apos;NM1.09.1&apos;].toString();
		newContactParent(transactionPerson);
		patients.add(patient);
	}
	else if (seg.name().toString() == &quot;MOA&quot;) {
		outpatientAdjudication = {};
		outpatientAdjudication.MOA01 = seg[&apos;MOA.01&apos;][&apos;MOA.01.1&apos;].toString();
		outpatientAdjudication.MOA02 = seg[&apos;MOA.02&apos;][&apos;MOA.02.1&apos;].toString();
		outpatientAdjudication.MOA03 = seg[&apos;MOA.03&apos;][&apos;MOA.03.1&apos;].toString();
		outpatientAdjudication.MOA04 = seg[&apos;MOA.04&apos;][&apos;MOA.04.1&apos;].toString();
		outpatientAdjudication.MOA05 = seg[&apos;MOA.05&apos;][&apos;MOA.05.1&apos;].toString();
	}
	else if (seg.name().toString() == &quot;MIA&quot;) {
		inpatientAdjudication = {};
		inpatientAdjudication.MIA01 = seg[&apos;MIA.01&apos;][&apos;MIA.01.1&apos;].toString();
		inpatientAdjudication.MIA02 = seg[&apos;MIA.02&apos;][&apos;MIA.02.1&apos;].toString();
		inpatientAdjudication.MIA03 = seg[&apos;MIA.03&apos;][&apos;MIA.03.1&apos;].toString();
		inpatientAdjudication.MIA04 = seg[&apos;MIA.04&apos;][&apos;MIA.04.1&apos;].toString();
		inpatientAdjudication.MIA05 = seg[&apos;MIA.05&apos;][&apos;MIA.05.1&apos;].toString();
	}
	else if (seg.name().toString() == &quot;LQ&quot;) {
		var remarkCode = {};
		remarkCode.LQ01 = seg[&apos;LQ.01&apos;][&apos;LQ.01.1&apos;].toString();
		remarkCode.LQ02 = seg[&apos;LQ.02&apos;][&apos;LQ.02.1&apos;].toString();
		remarkCodes.add(remarkCode);
	}
	else if (seg.name().toString() == &quot;PLB&quot;) {
		providerAdjustment = {};
		providerAdjustment.PLB01 = seg[&apos;PLB.01&apos;][&apos;PLB.01.1&apos;].toString();
		providerAdjustment.PLB02 = seg[&apos;PLB.02&apos;][&apos;PLB.02.1&apos;].toString();
		providerAdjustment.PLB0301 = seg[&apos;PLB.03&apos;][&apos;PLB.03.1&apos;].toString();
		providerAdjustment.PLB0302 = seg[&apos;PLB.03&apos;][&apos;PLB.03.2&apos;].toString();
		providerAdjustment.PLB04 = seg[&apos;PLB.04&apos;][&apos;PLB.04.1&apos;].toString();
		providerAdjustment.PLB05 = seg[&apos;PLB.05&apos;][&apos;PLB.05.1&apos;].toString();
		providerAdjustment.PLB06 = seg[&apos;PLB.06&apos;][&apos;PLB.06.1&apos;].toString();
		providerAdjustment.PLB07 = seg[&apos;PLB.07&apos;][&apos;PLB.07.1&apos;].toString();
		providerAdjustment.PLB08 = seg[&apos;PLB.08&apos;][&apos;PLB.08.1&apos;].toString();
		providerAdjustment.PLB09 = seg[&apos;PLB.09&apos;][&apos;PLB.09.1&apos;].toString();
		providerAdjustment.PLB10 = seg[&apos;PLB.10&apos;][&apos;PLB.10.1&apos;].toString();
		providerAdjustment.PLB11 = seg[&apos;PLB.11&apos;][&apos;PLB.11.1&apos;].toString();
		providerAdjustment.PLB12 = seg[&apos;PLB.12&apos;][&apos;PLB.12.1&apos;].toString();
		providerAdjustment.PLB13 = seg[&apos;PLB.13&apos;][&apos;PLB.13.1&apos;].toString();
		providerAdjustment.PLB14 =  seg[&apos;PLB.14&apos;][&apos;PLB.14.1&apos;].toString();
	}
}

newClaimParent(null);
newServiceParent(null);
newContactParent(null);
newReferenceParent(null);
newDateParent(null);
newPatientParent(null);
newAdjustmentParent(null);
newAmountParent(null);
newOutpatientAdjudicationParent(null);
newInpatientAdjudicationParent(null);
newRemarkCodesParent(null);
newProviderAdjustmentParent(null);

x12Interchange.functionalGroups = functionalGroups.toArray();

channelMap.put(&apos;x12Interchange&apos;, JSON.stringify(x12Interchange));

function newReferenceParent(newParent) {
	if (parentOfReference != null &amp;&amp; !references.isEmpty()) {
		parentOfReference.references = references.toArray();
	}
	references.clear();
	parentOfReference = newParent;
}

function newDateParent(newParent) {
	if (parentOfDate != null &amp;&amp; !dates.isEmpty()) {
		parentOfDate.dates = dates.toArray();
	}
	dates.clear();
	parentOfDate = newParent;
}

function newPatientParent(newParent) {
	if (parentOfPatient != null &amp;&amp; !patients.isEmpty()) {
		parentOfPatient.patients = patients.toArray();
	}
	patients.clear();
	parentOfPatient = newParent;
}

function newAdjustmentParent(newParent) {
	if (parentOfAdjustment != null &amp;&amp; !adjustments.isEmpty()) {
		parentOfAdjustment.adjustments = adjustments.toArray();
	}
	adjustments.clear();
	parentOfAdjustment = newParent;
}

function newContactParent(newParent) {
	if (parentOfContact != null &amp;&amp; !contacts.isEmpty()) {
		parentOfContact.contacts = contacts.toArray();
	}
	contacts.clear();
	parentOfContact = newParent;
}

function newAmountParent(newParent) {
	if (parentOfAmount != null &amp;&amp; amount != null) {
		parentOfAmount.amount = amount;
	}
	amount = null;
	parentOfAmount = newParent;
}

function newOutpatientAdjudicationParent(newParent) {
	if (parentOfOutpatientAdjudication != null &amp;&amp; outpatientAdjudication != null) {
		parentOfOutpatientAdjudication.outpatientAdjudication = outpatientAdjudication;
	}
	outpatientAdjudication = null;
	parentOfOutpatientAdjudication = newParent;
}

function newInpatientAdjudicationParent(newParent) {
	if (parentOfInpatientAdjudication != null &amp;&amp; inpatientAdjudication != null) {
		parentOfInpatientAdjudication.inpatientAdjudication = inpatientAdjudication;
	}
	inpatientAdjudication = null;
	parentOfInpatientAdjudication = newParent;
}

function newRemarkCodesParent(newParent) {
	if (parentOfRemarkCodes != null &amp;&amp; !remarkCodes.isEmpty()) {
		parentOfRemarkCodes.remarkCodes = remarkCodes.toArray();
	}
	remarkCodes.clear();
	parentOfRemarkCodes = newParent;
}

function newClaimParent(newParent) {
	if (parentOfClaim != null &amp;&amp; !claims.isEmpty()) {
		parentOfClaim.claims = claims.toArray();
	}
	claims.clear();
	parentOfClaim = newParent;
}

function newServiceParent(newParent) {
	if (parentOfService != null &amp;&amp; !services.isEmpty()) {
		parentOfService.services = services.toArray();
	}
	services.clear();
	parentOfService = newParent;
}

function newProviderAdjustmentParent(newParent) {
	if (parentOfProviderAdjustment != null &amp;&amp; providerAdjustment != null) {
		parentOfProviderAdjustment.providerAdjustment = providerAdjustment;
	}
	providerAdjustment = null;
	parentOfProviderAdjustment = newParent;
}</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64">U1QqODM1KjAwMDF+DQpCUFIqSSoxMjIyKkMqQ0hLKioqKioqKioqKioqMjAwNTA0MTJ+DQpUUk4q
MSowMDEyNTI0OTY1KjE1NTkxMjM0NTZ+DQpSRUYqRVYqMDMwMjQwOTI4fg0KRFRNKjQwNSoyMDA1
MDQxMn4NCk4xKlBSKllPVVIgVEFYIERPTExBUlMgQVQgV09SS34NCk4zKjQ4MUEwMCBERUVSIFJV
TiBST0FEfg0KTjQqV0VTVCBQQUxNIEJDSCpGTCoxMTExNH4NClBFUipCTCpKT0hOIFdBWU5FKlRF
KjgwMDU1NTEyMTIqRVgqMTIzfn4NCk4xKlBFKkFDTUUgTUVESUNBTCBDRU5URVIqRkkqNTk5OTQ0
NTIxfg0KTjMqUE8gQk9YIDg2MzM4Mn4NCk40Kk9STEFORE8qRkwqNTUxMTV+DQpSRUYqUFEqMTA0
ODh+DQpMWCoxfg0KQ0xQKkwwMDA0ODI4MzExKjIqMTAzMjMuNjQqOTEyKioxMiowNTA5MDI1NjM5
MCoxMSoxfg0KQ0FTKk9BKjIzKjk0MTEuNjR+DQpOTTEqUUMqMSpUT1dOU0VORCpXSUxMSUFNKlAq
KipNSSpYWFgxMjM0NTY3ODl+DQpOTTEqODIqMipBQ01FIE1FRElDQUwgQ0VOVEVSKioqKipCRCo5
ODd+DQpEVE0qMjMyKjIwMDUwMzAzfg0KRFRNKjIzMyoyMDA1MDMwNH4NCkFNVCpBVSo5MTJ+DQpM
WCoyfg0KQ0xQKjAwMDEwMDAwNTMqMio3NTEuNTAqMzEwKjIyMCoxMio1MDYzMDYyNjQzMH4NCk5N
MSpRQyoxKkJBS0kqQU5HSSoqKipNSSo0NTY3ODkxMjN+DQpOTTEqODIqMipTTUlUSCBKT05FUyBQ
QSoqKioqQlMqMzQ0MjZ+DQpEVE0qMjMyKjIwMDUwMTA2fg0KRFRNKjIzMyoyMDA1MDEwNn4NClNW
QypIQzoxMjM0NToyNioxNjYuNSozMCoxfg0KRFRNKjQ3MioyMDA1MDEwNn4NCkNBUypPQSoyMyox
MzYuNTB+DQpSRUYqMUIqNDMyODV+DQpBTVQqQjYqMTUwfg0KU1ZDKkhDOjY2NTQzOjI2KjU4NSoy
ODAqMjIwKjF+DQpEVE0qNDcyKjIwMDUwMTA2fg0KQ0FTKlBSKjEqMTUwKioyKjcwfg0KQ0FTKkNP
KjQyKjg1fg0KUkVGKjFCKjQzMjg1fg0KQU1UKkI2KjUwMH4NClNFKjM5KjAwMDF+DQo=</inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>EDI/X12</inboundDataType>
      <outboundDataType>JSON</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.edi.EDIDataTypeProperties" version="3.4.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.edi.EDISerializationProperties" version="3.4.2">
          <segmentDelimiter>~</segmentDelimiter>
          <elementDelimiter>*</elementDelimiter>
          <subelementDelimiter>:</subelementDelimiter>
          <inferX12Delimiters>true</inferX12Delimiters>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.edi.EDIBatchProperties" version="3.4.2">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
        <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.4.2">
      <rules/>
    </filter>
    <transportName>File Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.4.2">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <scheme>SFTP</scheme>
        <schemeProperties class="com.mirth.connect.connectors.file.SftpSchemeProperties">
          <passwordAuth>true</passwordAuth>
          <keyAuth>false</keyAuth>
          <keyFile></keyFile>
          <passPhrase></passPhrase>
          <hostKeyChecking>ask</hostKeyChecking>
          <knownHostsFile></knownHostsFile>
          <configurationSettings class="linked-hash-map"/>
        </schemeProperties>
        <host>192.168.137.10/srv/data/transformed</host>
        <outputPattern>${originalFilename}.json</outputPattern>
        <anonymous>false</anonymous>
        <username>mirth_sftpuser</username>
        <password>mirth_password</password>
        <timeout>20000</timeout>
        <secure>true</secure>
        <passive>true</passive>
        <validateConnection>true</validateConnection>
        <outputAppend>false</outputAppend>
        <errorOnExists>false</errorOnExists>
        <temporary>true</temporary>
        <binary>false</binary>
        <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        <template>${JsonUtil.prettyPrint(${x12Interchange})}</template>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>File Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>3</metaDataId>
      <name>Destination 2</name>
      <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <driver>com.microsoft.sqlserver.jdbc.SQLServerDriver</driver>
        <url>jdbc:sqlserver://host:port;databaseName=dbname</url>
        <username></username>
        <password></password>
        <query>var dbConn;

var loadDts = DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss&apos;);

try {	
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.microsoft.sqlserver.jdbc.SQLServerDriver&apos;,&apos;jdbc:sqlserver://192.168.137.4:1433;DatabaseName=MirthSource;integratedSecurity=true;authenticationScheme=JavaKerberos;serverSpn=MSSQLSvc/SQL01.Corp.MDPettit.com:1433&apos;);

	var obj = JSON.parse($(&apos;x12Interchange&apos;));

	var interchangeId = insertInterchange(obj);

	insertFunctionalGroups(interchangeId, obj);

} finally {
	if (dbConn) { 
		dbConn.close();
	}
}

function insertInterchange(X12Interchange) {
	var interchangeId = null;
	
	var insertInterchangeStmt = &quot;INSERT INTO [X12].[Interchange] VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)&quot;;

	var interchangeParameters = [];
	interchangeParameters[0] = obj.ISA01;
	interchangeParameters[1] = obj.ISA02;
	interchangeParameters[2] = obj.ISA03;
	interchangeParameters[3] = obj.ISA04;
	interchangeParameters[4] = obj.ISA05;
	interchangeParameters[5] = obj.ISA06;
	interchangeParameters[6] = obj.ISA07;
	interchangeParameters[7] = obj.ISA08;
	interchangeParameters[8] = obj.ISA09;
	interchangeParameters[9] = obj.ISA10;
	interchangeParameters[10] = obj.ISA11;
	interchangeParameters[11] = obj.ISA12;
	interchangeParameters[12] = obj.ISA13;
	interchangeParameters[13] = obj.ISA14;
	interchangeParameters[14] = obj.ISA15;
	interchangeParameters[15] = obj.ISA16;
	interchangeParameters[16] = connectorMessage.getRawData();
	interchangeParameters[17] = loadDts;

	var crs = dbConn.executeUpdateAndGetGeneratedKeys(insertInterchangeStmt, java.util.Arrays.asList(interchangeParameters));

	if (crs.next()) {
		interchangeId = crs.getLong(1);
	} else {
		logger.error(&quot;Error insterting X12 835 interchange record.&quot;);
	}

	return interchangeId;
}

function insertFunctionalGroups(interchangeId, obj) {
	for each (var functionalGroup in obj.functionalGroups) {
		var functionalGroupId = null;
	
		var preparedStatement = &quot;INSERT INTO [X12].[FunctionalGroup] VALUES (?,?,?,?,?,?,?,?,?, ?)&quot;;
	
		var parameters = [];
		parameters[0] = interchangeId;
		parameters[1] = functionalGroup.GS01;
		parameters[2] = functionalGroup.GS02;
		parameters[3] = functionalGroup.GS03;
		parameters[4] = functionalGroup.GS04;
		parameters[5] = functionalGroup.GS05;
		parameters[6] = functionalGroup.GS06;
		parameters[7] = functionalGroup.GS07;
		parameters[8] = functionalGroup.GS08;
		parameters[9] = loadDts;
	
		var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));
	
		if (crs.next()) {
			functionalGroupId = crs.getLong(1);
			insertTransactions(interchangeId, functionalGroupId, functionalGroup);
		} else {
			logger.error(&quot;Error insterting X12 835 functional group record.&quot;);
		}
	}
}

function insertTransactions(interchangeId, functionalGroupId, obj) {
	for each (var transaction in obj.transactions) {
		var transactionId = null;
		
		var preparedStatement = &quot;INSERT INTO [X12835].[Transaction] VALUES (?,?,?,?,?)&quot;;

		var parameters = [];
		parameters[0] = interchangeId;
		parameters[1] = functionalGroupId;
		parameters[2] = transaction.ST01;
		parameters[3] = transaction.ST02;
		parameters[4] = loadDts;

		var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));

		if (crs.next()) {
			transactionId = crs.getLong(1);
			insertClaims(transactionId, transaction);
			insertDates(&apos;Transaction&apos;, transactionId, transaction);
			insertReferences(&apos;Transaction&apos;, transactionId, transaction);
			insertFinancial(transactionId, transaction);
			insertPersons(transactionId, transaction);
			insertProviderAdjustment(transactionId, transaction);
		} else {
			logger.error(&quot;Error insterting X12 835 transaction record.&quot;);
		}
	}
}

function insertClaims(transactionId, transaction) {
	for each (var header in transaction.headers) {
		var lx01 = header.LX01;
		for each (var claim in header.claims) {
			var claimId = null;
	
			var preparedStatement = &quot;INSERT INTO [X12835].[Claim] VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)&quot;;
	
			var parameters = [];
			parameters[0] = transactionId;
			parameters[1] = lx01;
			parameters[2] = claim.CLP01;
			parameters[3] = claim.CLP02;
			parameters[4] = claim.CLP03;
			parameters[5] = claim.CLP04;
			parameters[6] = claim.CLP05;
			parameters[7] = claim.CLP06;
			parameters[8] = claim.CLP07;
			parameters[9] = claim.CLP08;
			parameters[10] = claim.CLP09;
			parameters[11] = claim.CLP10;
			parameters[12] = claim.CLP11;
			parameters[13] = claim.CLP12;
			parameters[14] = claim.CLP13;
			parameters[15] = loadDts;
	
			var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));
	
			if (crs.next()) {
				claimId = crs.getLong(1);
				insertPatients(claimId, claim);
				insertServices(transactionId, claimId, claim);
				insertClaimAdjustments(claimId, claim);
				insertClaimAmount(claimId, claim);
				insertDates(&apos;Claim&apos;, claimId, claim);
				insertReferences(&apos;Claim&apos;, claimId, claim);
			} else {
				logger.error(&quot;Error insterting X12 835 claim record.&quot;);
			}
		}		
	}
}

function insertPatients(claimId, claim) {
	for each (var patient in claim.patients) {
		var patientId = null;

		var preparedStatement = &quot;INSERT INTO [X12835].[ClaimPatient] VALUES (?,?,?,?,?,?,?,?,?,?,?)&quot;;

		var parameters = [];
		parameters[0] = claimId;
		parameters[1] = patient.NM101;
		parameters[2] = patient.NM102;
		parameters[3] = patient.NM103;
		parameters[4] = patient.NM104;
		parameters[5] = patient.NM105;
		parameters[6] = patient.NM106;
		parameters[7] = patient.NM107;
		parameters[8] = patient.NM108;
		parameters[9] = patient.NM109;
		parameters[10] = loadDts;

		var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));

		if (crs.next()) {
			patientId = crs.getLong(1);
		} else {
			logger.error(&quot;Error insterting X12 835 patient record.&quot;);
		}
	}		
}

function insertServices(transactionId, claimId, claim) {
	for each (var service in claim.services) {
		var serviceId = null;

		var preparedStatement = &quot;INSERT INTO [X12835].[Service] VALUES (?,?,?,?,?,?,?,?,?,?,?,?)&quot;;

		var parameters = [];
		parameters[0] = claimId;
		parameters[1] = transactionId;
		parameters[2] = service.SVC0101;
		parameters[3] = service.SVC0102;
		parameters[4] = service.SVC0103;
		parameters[5] = service.SVC02;
		parameters[6] = service.SVC03;
		parameters[7] = service.SVC04;
		parameters[8] = service.SVC05;
		parameters[9] = service.SVC06;
		parameters[10] = service.SVC07;
		parameters[11] = loadDts;

		var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));

		if (crs.next()) {
			serviceId = crs.getLong(1);
			insertServiceAdjustments(serviceId, service);
			insertServiceAmount(serviceId, service);
			insertDates(&apos;Service&apos;, serviceId, service);
			insertReferences(&apos;Service&apos;, serviceId, service);
		} else {
			logger.error(&quot;Error insterting X12 835 service record.&quot;);
		}
	}		
}

function insertClaimAdjustments(claimId, claim) {
	for each (var adjustment in claim.adjustments) {
		var adjustmentId = null;

		var preparedStatement = &quot;INSERT INTO [X12835].[ClaimAdjustment] VALUES (?,?,?,?,?,?,?)&quot;;

		var parameters = [];
		parameters[0] = claimId;
		parameters[1] = adjustment.CAS01;
		parameters[2] = adjustment.CAS02;
		parameters[3] = adjustment.CAS03;
		parameters[4] = adjustment.CAS04;
		parameters[5] = adjustment.CAS05;
		parameters[6] = loadDts;

		var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));

		if (crs.next()) {
			adjustmentId = crs.getLong(1);
		} else {
			logger.error(&quot;Error insterting X12 835 adjustment record.&quot;);
		}
	}		
}

function insertServiceAdjustments(serviceId, service) {
	for each (var adjustment in service.adjustments) {
		var adjustmentId = null;

		var preparedStatement = &quot;INSERT INTO [X12835].[ServiceAdjustment] VALUES (?,?,?,?,?,?,?)&quot;;

		var parameters = [];
		parameters[0] = serviceId;
		parameters[1] = adjustment.CAS01;
		parameters[2] = adjustment.CAS02;
		parameters[3] = adjustment.CAS03;
		parameters[4] = adjustment.CAS04;
		parameters[5] = adjustment.CAS05;
		parameters[6] = loadDts;

		var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));

		if (crs.next()) {
			adjustmentId = crs.getLong(1);
		} else {
			logger.error(&quot;Error insterting X12 835 adjustment record.&quot;);
		}
	}		
}

function insertClaimAmount(claimId, claim) {
	if(claim.amount != null) {
		var preparedStatement = &quot;INSERT INTO [X12835].[ClaimAmount] VALUES (?,?,?,?)&quot;;
	
		var parameters = [];
		parameters[0] = claimId;
		parameters[1] = claim.amount.AMT01;
		parameters[2] = claim.amount.AMT02;
		parameters[3] = loadDts;
	
		var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));
	
		if (crs.next()) {
			amountId = crs.getLong(1);
		} else {
			logger.error(&quot;Error insterting X12 835 claim amount record.&quot;);
		}	
	}
}

function insertServiceAmount(serviceId, service) {
	if(service.amount != null) {
		var preparedStatement = &quot;INSERT INTO [X12835].[ServiceAmount] VALUES (?,?,?,?)&quot;;
	
		var parameters = [];
		parameters[0] = serviceId;
		parameters[1] = service.amount.AMT01;
		parameters[2] = service.amount.AMT02;
		parameters[3] = loadDts;
	
		var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));
	
		if (crs.next()) {
			amountId = crs.getLong(1);
		} else {
			logger.error(&quot;Error insterting X12 835 service amount record.&quot;);
		}	
	}
}

function insertDates(type, objId, obj) {
	for each (var date in obj.dates) {
		var dateId = null;

		if (type == &quot;Claim&quot;) {
			var preparedStatement = &quot;INSERT INTO [X12835].[ClaimDate] VALUES (?,?,?,?)&quot;;	
		} else if (type == &quot;Service&quot;) {
			var preparedStatement = &quot;INSERT INTO [X12835].[ServiceDate] VALUES (?,?,?,?)&quot;;	
		} else if (type == &quot;Transaction&quot;) {
			var preparedStatement = &quot;INSERT INTO [X12835].[TransactionDate] VALUES (?,?,?,?)&quot;;	
		}
		

		var parameters = [];
		parameters[0] = objId;
		parameters[1] = date.DTM01;
		parameters[2] = date.DTM02;
		parameters[3] = loadDts;

		var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));

		if (crs.next()) {
			dateId = crs.getLong(1);
		} else {
			logger.error(&quot;Error insterting X12 835 claim date record.&quot;);
		}
	}
}

function insertReferences(type, objId, obj) {
	for each (var reference in obj.references) {
		var referenceId = null;

		var pareparedStatement = null;

		if(type == &apos;Transaction&apos;) {
			preparedStatement = &quot;INSERT INTO [X12835].[TransactionReference] VALUES (?,?,?,?)&quot;;
		} else if(type == &apos;Claim&apos;) {
			preparedStatement = &quot;INSERT INTO [X12835].[ClaimReference] VALUES (?,?,?,?)&quot;;
		} else if(type == &apos;Service&apos;) {
			preparedStatement = &quot;INSERT INTO [X12835].[ServiceReference] VALUES (?,?,?,?)&quot;;
		} else if(type == &apos;TraceNumber&apos;) {
			preparedStatement = &quot;INSERT INTO [X12835].[TraceNumberReference] VALUES (?,?,?,?)&quot;;
		} else if(type == &apos;Payer&apos;) {
			preparedStatement = &quot;INSERT INTO [X12835].[PayerReference] VALUES (?,?,?,?)&quot;;
		} else if(type == &apos;Payee&apos;) {
			preparedStatement = &quot;INSERT INTO [X12835].[PayeeReference] VALUES (?,?,?,?)&quot;;
		} else if(type == &apos;Financial&apos;) {
			preparedStatement = &quot;INSERT INTO [X12835].[FinancialReference] VALUES (?,?,?,?)&quot;;
		}

		var parameters = [];
		parameters[0] = objId;
		parameters[1] = reference.REF01;
		parameters[2] = reference.REF02;
		parameters[3] = loadDts;

		var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));

		if (crs.next()) {
			referenceId = crs.getLong(1);
		} else {
			logger.error(&quot;Error insterting X12 835 &quot; + type + &quot; reference record.&quot;);
		}
	}
}

function insertFinancial(transactionId, transaction) {
	if(transaction.financial != null) {
		var preparedStatement = &quot;INSERT INTO [X12835].[Financial] VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)&quot;;
	
		var parameters = [];
		parameters[0] = transactionId;
		parameters[1] = transaction.financial.BPR01;
		parameters[2] = transaction.financial.BPR02;
		parameters[3] = transaction.financial.BPR03;
		parameters[4] = transaction.financial.BPR04;
		parameters[5] = transaction.financial.BPR05;
		parameters[6] = transaction.financial.BPR06;
		parameters[7] = transaction.financial.BPR07;
		parameters[8] = transaction.financial.BPR08;
		parameters[9] = transaction.financial.BPR09;
		parameters[10] = transaction.financial.BPR10;
		parameters[11] = transaction.financial.BPR11;
		parameters[12] = transaction.financial.BPR12;
		parameters[13] = transaction.financial.BPR13;
		parameters[14] = transaction.financial.BPR14;
		parameters[15] = transaction.financial.BPR15;
		parameters[16] = transaction.financial.BPR16;
		parameters[17] = loadDts;
	
		var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));
	
		if (crs.next()) {
			financialId = crs.getLong(1);
			insertReferences(&apos;Financial&apos;, financialId, transaction.financial);
		} else {
			logger.error(&quot;Error insterting X12 835 financial record.&quot;);
		}	
	}
}

function insertPersons(transactionId, transaction) {
	for each (var person in transaction.persons) {
		var personType = null;
		var preparedStatement = null;

		if (person.N101 == &apos;PR&apos;) {
			personType = &apos;Payer&apos;;
			preparedStatement = &quot;INSERT INTO [X12835].[Payer] VALUES (?,?,?,?,?,?,?,?,?,?,?)&quot;;
		} else if (person.N101 == &apos;PE&apos;) {
			personType = &apos;Payee&apos;;
			preparedStatement = &quot;INSERT INTO [X12835].[Payee] VALUES (?,?,?,?,?,?,?,?,?,?,?)&quot;;
		}

		if (preparedStatement == null) {
			logger.error(&quot;Error handling transaction person record.&quot;);
		} else {
			var parameters = [];
			parameters[0] = transactionId;
			parameters[1] = person.N101;
			parameters[2] = person.N102;
			parameters[3] = person.N103;
			parameters[4] = person.N104;
			parameters[5] = person.N301;
			parameters[6] = person.N302;
			parameters[7] = person.N401;
			parameters[8] = person.N402;
			parameters[9] = person.N403;
			parameters[10] = loadDts;
		
			var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));
		
			if (crs.next()) {
				personId = crs.getLong(1);
				insertReferences(personType, personId, person);
				insertContacts(personType, personId, person);
			} else {
				logger.error(&quot;Error insterting X12 835 financial record.&quot;);
			}	
		}
	}
}

function insertContacts(type, personId, person) {
	for each (var contact in person.contacts) {
		var preparedStatement = null;

		if (type == &apos;Payer&apos;) {
			preparedStatement = &quot;INSERT INTO [X12835].[PayerContact] VALUES (?,?,?,?,?,?,?,?)&quot;;
		} else if (type == &apos;Payee&apos;) {
			preparedStatement = null;
		}

		if (preparedStatement == null) {
			logger.error(&quot;Error handling transaction person record.&quot;);
		} else {
			var parameters = [];
			parameters[0] = personId;
			parameters[1] = contact.PER01;
			parameters[2] = contact.PER02;
			parameters[3] = contact.PER03;
			parameters[4] = contact.PER04;
			parameters[5] = contact.PER05;
			parameters[6] = contact.PER06;
			parameters[7] = loadDts;

			var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));
		
			if (crs.next()) {
				contactId = crs.getLong(1);
			} else {
				logger.error(&quot;Error insterting X12 835 contact record.&quot;);
			}	
		}
	}
}

function insertProviderAdjustment(transactionId, transaction) {
	if(transaction.providerAdjustment != null) {
		var preparedStatement = &quot;INSERT INTO [X12835].[ProviderAdjustment] VALUES (?,?,?,?,?,?,?)&quot;;
	
		var parameters = [];
		parameters[0] = transactionId;
		parameters[1] = transaction.providerAdjustment.PLB01;
		parameters[2] = transaction.providerAdjustment.PLB02;
		parameters[3] = transaction.providerAdjustment.PLB0301;
		parameters[4] = transaction.providerAdjustment.PLB0302
		parameters[5] = transaction.providerAdjustment.PLB04;
		parameters[6] = loadDts;
	
		var crs = dbConn.executeUpdateAndGetGeneratedKeys(preparedStatement, java.util.Arrays.asList(parameters));
	
		if (crs.next()) {
			amountId = crs.getLong(1);
		} else {
			logger.error(&quot;Error insterting X12 835 transaction provider adjustment record.&quot;);
		}	
	}
}</query>
        <useScript>true</useScript>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>Database Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.4.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.4.2">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <codeTemplateLibraries/>
</channel>