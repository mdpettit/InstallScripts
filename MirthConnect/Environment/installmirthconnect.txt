#!/bin/sh
#exit immediately if a command exists with a non-zero status
set -e
#
# Usage:
#   'curl -SSL https://raw.githubusercontent.com/mdpettit/InstallScripts/master/MirthConnect/Environment/installmirthconnect.txt | sh -s <mirthuser>'
#

echo "Starting setup..."
u="$(whoami)"
echo "User name: $u"

mirthuser="$1"

echo "==== Creating update script ===="

installfolder="/opt/install/"
installscriptfile="updatemirthconnect"
installscript="$installfolder$installscriptfile"

mkdir -p $HOME/bin
if [[ ! -d "$installfolder" ]]; then
  sudo mkdir -p $installfolder

  sudo setfacl -m u:$u:rwx $installfolder
fi

echo "#!/bin/sh" > $installscript
echo "curl -sSL https://raw.githubusercontent.com/mdpettit/InstallScripts/master/MirthConnect/Environment/installmirthconnect.txt | sh -s $@" >> $installscript
chmod +x $installscript

if [[ ! -e "$HOME/bin/$installscriptfile" ]]; then 
  echo "creating a symbolic link for install file"
  echo "ln -f -s $installscript $HOME/bin/$installscriptfile"
  ln -f -s $installscript $HOME/bin/$installscriptfile
fi

echo "==== Update script ===="
cat $installscript
echo "==== End Update Script ===="

echo "====  existing containers on this host ===="
docker ps -a

echo "==== existing images on this host ===="
docker images

echo "==== existing volumes on this host ===="
docker volume ls

# check to see if volume already exists.  if not, create it
if [ -z $(docker volume ls -q --filter "name=mirthconnectdata") ]; then
  echo "==== Creating persistent volume for Archive ===="
  docker volume create --name mirthconnectdata
fi

echo "stopping existing docker container"
docker stop mirthconnect || echo 'no container to stop'
echo "removing docker container"
docker rm mirthconnect || echo 'no container to remove'
echo "removing docker image"
docker rmi mdpettit/mirth-connect || echo 'no image to remove'
echo "pulling latest docker image from repo"
docker pull mdpettit/mirth-connect
echo "starting docker container with new image"
set -x
docker run -d -p 8080:8080 -p 8443:8443 -v mirthconnectdata:/data --name mirthconnect mdpettit/mirth-connect
set +x

echo "sleeping until docker container is up"
until [ "`/usr/bin/docker inspect -f {{.State.Running}} mirthconnect`"=="true" ]; do
    sleep 1s;
done;

docker exec mirthconnect mkdir -p /data/archive
docker exec mirthconnect mkdir -p /data/error

kerberosfile="krb5.conf"
kerberospath=$installfolder$kerberosfile

echo "Checking if [$kerberospath] exists"
if [[ -f "$kerberospath" ]]; then
   echo "copying kerberos configuration file from $installfolder"
   docker cp $installfolder/krb5.conf mirthconnect:/etc/krb5.conf
   docker cp $installfolder/SQLJDBCDriver.conf mirthconnect:/opt/mirthconnect/conf/SQLJDBCDriver.conf
   docker cp $installfolder/mirth.keytab mirthconnect:/opt/mirthconnect/conf/mirth.keytab   
   docker exec mirthconnect sed "\$a-Djava.security.auth.login.config=/opt/mirthconnect/conf/SQLJDBCDriver.conf" /opt/mirthconnect/mcservice.vmoptions
   docker exec mirthconnect sed "\$a-Djava.security.krb5.conf=/etc/krb5.conf" /opt/mirthconnect/mcservice.vmoptions
   docker exec mirthconnect kinit $mirthuser -k -t /opt/mirthconnect/conf/mirth.keytab
else
   echo "ERROR: No keberos configuration files found in [$kerberospath] so integrated security won't work"
fi

echo "==== Listing running docker containers ===="
docker ps
